// <auto-generated />
using System;
using Husa.Quicklister.Abor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Husa.Quicklister.Abor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623190954_V2.29.0_AddShowingTimeFields")]
    partial class V2290_AddShowingTimeFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Base.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EntityOwnerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Features")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Room");

                    b.ToTable("Room");

                    b.HasDiscriminator<string>("EntityOwnerType").HasValue("Room");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId", "CommunityId")
                        .IsUnique();

                    b.ToTable("CommunityEmployee");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppointmentType");

                    b.Property<string>("Changes")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("CommunityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JsonImportStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastJsonImportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPhotoRequestCreationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LastPhotoRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LegacyProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("UseShowingTime")
                        .HasColumnType("bit")
                        .HasColumnName("UseShowingTime");

                    b.Property<string>("XmlStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("NotFromXml");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_CommunitySale");

                    b.ToTable("Community");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ManagementTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyManaged")
                        .HasColumnType("bit");

                    b.Property<Guid>("SaleListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SaleListingId");

                    b.ToTable("ManagementTrace");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppointmentType");

                    b.Property<int?>("CDOM")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DOM")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyManaged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhotosDeclined")
                        .HasColumnType("bit");

                    b.Property<string>("JsonImportStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("JsonListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastJsonImportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPhotoRequestCreationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LastPhotoRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LegacyId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime?>("ListDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ListPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ListPrice");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("LockedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LockedBy");

                    b.Property<bool>("LockedByLegacy")
                        .HasColumnType("bit")
                        .HasColumnName("LockedByLegacy");

                    b.Property<DateTime?>("LockedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LockedOn");

                    b.Property<string>("LockedStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LockedStatus");

                    b.Property<DateTime?>("MarketModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MarketUniqueId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MlsNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MlsStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("PhotosDeclinedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PhotosDeclinedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SalePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UnlockedFromLegacyBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UnlockedFromLegacyBy");

                    b.Property<DateTime?>("UnlockedFromLegacyOn")
                        .HasColumnType("datetime")
                        .HasColumnName("UnlockedFromLegacyOn");

                    b.Property<bool>("UseShowingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("UseShowingTime");

                    b.Property<Guid?>("XmlDiscrepancyListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("XmlListingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SalePropertyId");

                    b.ToTable("ListingSale", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListingTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListingSaleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ListingSaleRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestMlsStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ListingSaleId");

                    b.ToTable("ListingSaleTrace", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ScrapedListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ScrapedListing");

                    b.ToTable("ScrapedListing");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Lot.LotListing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CDOM")
                        .HasColumnType("int");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DOM")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyManaged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhotosDeclined")
                        .HasColumnType("bit");

                    b.Property<string>("JsonImportStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("JsonListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastJsonImportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPhotoRequestCreationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LastPhotoRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LegacyId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime?>("ListDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ListPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ListType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("LockedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LockedBy");

                    b.Property<DateTime?>("LockedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("LockedOn");

                    b.Property<string>("LockedStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("LockedStatus");

                    b.Property<DateTime?>("MarketModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MarketUniqueId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MlsNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MlsStatus")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OwnerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OwnerName");

                    b.Property<Guid?>("PhotosDeclinedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PhotosDeclinedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseShowingTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("XmlDiscrepancyListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("XmlListingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("LotListing", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Lot.LotManagementTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManuallyManaged")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("LotManagementTrace");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Office.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Office");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.OpenHouse.OpenHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasMaxLength(8)
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OpenHouseType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Refreshments")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("StartTime")
                        .HasMaxLength(8)
                        .HasColumnType("time");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_OpenHouse");

                    b.ToTable("OpenHouse");

                    b.HasDiscriminator<string>("OpenHouseType").IsComplete(false).HasValue("OpenHouse");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Plan.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JsonImportStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastJsonImportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPhotoRequestCreationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("LastPhotoRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("LegacyProfileId")
                        .HasColumnType("int");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("XmlStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("NotFromXml");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Plan");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("OwnerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_SaleProperty");

                    b.HasIndex("PlanId");

                    b.ToTable("SaleProperty");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ReverseProspect.ReverseProspect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReportData");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ReverseProspect");

                    b.ToTable("ReverseProspect");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.CommunityShowingTimeContact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ContactId", "ScopeId");

                    b.HasIndex("ScopeId", "ContactId");

                    b.ToTable("CommunityShowingTimeContact", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.ListingShowingTimeContact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScopeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ContactId", "ScopeId");

                    b.HasIndex("ScopeId", "ContactId");

                    b.ToTable("ListingShowingTimeContact", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.ShowingTimeContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AppointmentChangesNotificationsOptionsMobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppointmentChangesNotificationsOptionsMobilePhone");

                    b.Property<string>("AppointmentChangesNotificationsOptionsOfficePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppointmentChangesNotificationsOptionsOfficePhone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmAppointmentCallerByMobilePhone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("ConfirmAppointmentCallerByMobilePhone");

                    b.Property<string>("ConfirmAppointmentCallerByOfficePhone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("ConfirmAppointmentCallerByOfficePhone");

                    b.Property<bool?>("ConfirmAppointmentsByEmail")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmAppointmentsByEmail");

                    b.Property<bool?>("ConfirmAppointmentsByMobilePhone")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmAppointmentsByMobilePhone");

                    b.Property<bool?>("ConfirmAppointmentsByOfficePhone")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmAppointmentsByOfficePhone");

                    b.Property<bool?>("ConfirmAppointmentsByText")
                        .HasColumnType("bit")
                        .HasColumnName("ConfirmAppointmentsByText");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("MobilePhone");

                    b.Property<bool?>("NotifyAppointmentChangesByEmail")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyAppointmentChangesByEmail");

                    b.Property<bool?>("NotifyAppointmentChangesByMobilePhone")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyAppointmentChangesByMobilePhone");

                    b.Property<bool?>("NotifyAppointmentChangesByOfficePhone")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyAppointmentChangesByOfficePhone");

                    b.Property<bool?>("NotifyAppointmentsChangesByText")
                        .HasColumnType("bit")
                        .HasColumnName("NotifyAppointmentsChangesByText");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("OfficePhone");

                    b.Property<bool?>("SendOnFYIByEmail")
                        .HasColumnType("bit")
                        .HasColumnName("SendOnFYIByEmail");

                    b.Property<bool?>("SendOnFYIByText")
                        .HasColumnType("bit")
                        .HasColumnName("SendOnFYIByText");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ShowingTimeContact");

                    b.ToTable("ShowingTimeContact", (string)null);
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.Agent.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_Agent");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.Listing.XmlRequestError", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ImportSource")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SysModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("XmlRequestError");
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.ViolationWarningLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Emails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SysCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SysCreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("SysModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SysModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SysTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("IX_ViolationWarningLog");

                    b.HasIndex("ListingId");

                    b.ToTable("ViolationWarningLog");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ListingSaleRoom", b =>
                {
                    b.HasBaseType("Husa.Quicklister.Abor.Domain.Entities.Base.Room");

                    b.Property<Guid>("SalePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SalePropertyId");

                    b.HasDiscriminator().HasValue("SaleProperty");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Plan.PlanRoom", b =>
                {
                    b.HasBaseType("Husa.Quicklister.Abor.Domain.Entities.Base.Room");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PlanId");

                    b.HasDiscriminator().HasValue("Plan");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityOpenHouse", b =>
                {
                    b.HasBaseType("Husa.Quicklister.Abor.Domain.Entities.OpenHouse.OpenHouse");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CommunityId");

                    b.HasDiscriminator().HasValue("Community");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListingOpenHouse", b =>
                {
                    b.HasBaseType("Husa.Quicklister.Abor.Domain.Entities.OpenHouse.OpenHouse");

                    b.Property<Guid>("SalePropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("SalePropertyId");

                    b.HasDiscriminator().HasValue("SaleProperty");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityEmployee", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", "Community")
                        .WithMany("Employees")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", b =>
                {
                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityFinancialInfo", "Financial", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AcceptableFinancing")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("AcceptableFinancing");

                            b1.Property<decimal?>("AgentBonusAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AgentBonusAmount");

                            b1.Property<string>("AgentBonusAmountType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("AgentBonusAmountType");

                            b1.Property<string>("BillingFrequency")
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("BillingFrequency");

                            b1.Property<DateTime?>("BonusExpirationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BonusExpirationDate");

                            b1.Property<decimal?>("BuyersAgentCommission")
                                .HasMaxLength(6)
                                .HasPrecision(18, 3)
                                .HasColumnType("decimal(18,3)")
                                .HasColumnName("BuyersAgentCommission");

                            b1.Property<string>("BuyersAgentCommissionType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("BuyersAgentCommissionType");

                            b1.Property<string>("HOARequirement")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("HOARequirement");

                            b1.Property<bool>("HasAgentBonus")
                                .HasColumnType("bit")
                                .HasColumnName("HasAgentBonus");

                            b1.Property<bool>("HasBonusWithAmount")
                                .HasColumnType("bit")
                                .HasColumnName("HasBonusWithAmount");

                            b1.Property<bool>("HasHoa")
                                .HasColumnType("bit")
                                .HasColumnName("HasHoa");

                            b1.Property<decimal?>("HoaFee")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HoaFee");

                            b1.Property<string>("HoaIncludes")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("HoaIncludes");

                            b1.Property<string>("HoaName")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("HoaName");

                            b1.Property<string>("TaxExemptions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("TaxExemptions");

                            b1.Property<decimal?>("TaxRate")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxRate");

                            b1.Property<int?>("TaxYear")
                                .HasColumnType("int")
                                .HasColumnName("TaxYear");

                            b1.Property<string>("TitleCompany")
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("TitleCompany");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AccessInformation", "AccessInformation", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AccessMethod")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AccessMethod");

                            b1.Property<string>("AccessNotes")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("AccessNotes");

                            b1.Property<string>("AlarmArmCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmArmCode");

                            b1.Property<string>("AlarmDisarmCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmDisarmCode");

                            b1.Property<string>("AlarmNotes")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmNotes");

                            b1.Property<string>("AlarmPasscode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmPasscode");

                            b1.Property<string>("CbsCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("CbsCode");

                            b1.Property<string>("Code")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Code");

                            b1.Property<string>("Combination")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Combination");

                            b1.Property<string>("DeviceId")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("DeviceId");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("GateCode");

                            b1.Property<string>("Location")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("Location");

                            b1.Property<bool>("ProvideAlarmDetails")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("ProvideAlarmDetails");

                            b1.Property<string>("Serial")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Serial");

                            b1.Property<string>("SharingCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("SharingCode");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AdditionalInstructions", "AdditionalInstructions", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("NotesForApptStaff")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("NotesForApptStaff");

                            b1.Property<string>("NotesForShowingAgent")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("NotesForShowingAgent");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AppointmentRestrictions", "AppointmentRestrictions", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("AllowAppraisals")
                                .HasColumnType("bit")
                                .HasColumnName("AllowAppraisals");

                            b1.Property<bool>("AllowInspectionsAndWalkThroughs")
                                .HasColumnType("bit")
                                .HasColumnName("AllowInspectionsAndWalkThroughs");

                            b1.Property<bool>("AllowRealtimeAvailabilityForBrokers")
                                .HasColumnType("bit")
                                .HasColumnName("AllowRealtimeAvailabilityForBrokers");

                            b1.Property<int?>("BufferTimeBetweenAppointments")
                                .HasColumnType("int")
                                .HasColumnName("BufferTimeBetweenAppointments");

                            b1.Property<bool>("LeadTime")
                                .HasColumnType("bit")
                                .HasColumnName("LeadTime");

                            b1.Property<int?>("MaxShowingWindowShowings")
                                .HasColumnType("int")
                                .HasColumnName("MaxShowingWindowShowings");

                            b1.Property<int?>("MinShowingWindowShowings")
                                .HasColumnType("int")
                                .HasColumnName("MinShowingWindowShowings");

                            b1.Property<string>("OverlappingAppointmentMode")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OverlappingAppointmentMode");

                            b1.Property<int?>("RequiredTimeHours")
                                .HasColumnType("int")
                                .HasColumnName("RequiredTimeHours");

                            b1.Property<int?>("SuggestedTimeHours")
                                .HasColumnType("int")
                                .HasColumnName("SuggestedTimeHours");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.SchoolsInfo", "SchoolsInfo", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ElementarySchool");

                            b1.Property<string>("HighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("HighSchool");

                            b1.Property<string>("MiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MiddleSchool");

                            b1.Property<string>("OtherElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherElementarySchool");

                            b1.Property<string>("OtherHighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherHighSchool");

                            b1.Property<string>("OtherMiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherMiddleSchool");

                            b1.Property<string>("SchoolDistrict")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SchoolDistrict");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySaleOffice", "SaleOffice", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IsSalesOffice")
                                .HasColumnType("bit")
                                .HasColumnName("IsSalesOffice");

                            b1.Property<string>("SalesOfficeCity")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeCity");

                            b1.Property<string>("SalesOfficeZip")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeZip");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("StreetNumber");

                            b1.Property<string>("StreetSuffix")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StreetSuffix");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityShowingInfo", "Showing", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ContactPhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("ContactPhone");

                            b1.Property<string>("Directions")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("Directions");

                            b1.Property<bool>("EnableOpenHouses")
                                .HasColumnType("bit")
                                .HasColumnName("EnableOpenHouses");

                            b1.Property<string>("LockBoxType")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("LockBoxType");

                            b1.Property<string>("OccupantPhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("OccupantPhone");

                            b1.Property<string>("OwnerName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ShowingInfoOwnerName");

                            b1.Property<string>("RealtorContactEmail")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("RealtorContactEmail");

                            b1.Property<bool>("ShowOpenHousesPending")
                                .HasColumnType("bit")
                                .HasColumnName("ShowOpenHousesPending");

                            b1.Property<string>("ShowingInstructions")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("ShowingInstructions");

                            b1.Property<string>("ShowingRequirements")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ShowingRequirements");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.EmailLead", "EmailLead", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("EmailLeadFifth")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadFifth");

                            b1.Property<string>("EmailLeadFourth")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadFourth");

                            b1.Property<string>("EmailLeadOther")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadOther");

                            b1.Property<string>("EmailLeadPrincipal")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadPrincipal");

                            b1.Property<string>("EmailLeadSecondary")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadSecondary");

                            b1.Property<string>("EmailLeadThird")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("EmailLeadThird");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.ProfileInfo", "ProfileInfo", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BackupPhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("BackupPhone");

                            b1.Property<string>("EmailMailViolationsWarnings")
                                .HasMaxLength(600)
                                .HasColumnType("nvarchar(600)")
                                .HasColumnName("EmailMailViolationsWarnings");

                            b1.Property<string>("Fax")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Fax");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Latitude");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Longitude");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(65)
                                .HasColumnType("nvarchar(65)")
                                .HasColumnName("Name");

                            b1.Property<string>("OfficePhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("OfficePhone");

                            b1.Property<string>("OwnerName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("OwnerName");

                            b1.Property<bool>("UseLatLong")
                                .HasColumnType("bit")
                                .HasColumnName("UseLatLong");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.Property", "Property", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("ConstructionStage")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("ConstructionStage");

                            b1.Property<string>("County")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("County");

                            b1.Property<string>("LotDescription")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("LotDescription");

                            b1.Property<string>("LotDimension")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotDimension");

                            b1.Property<string>("LotSize")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotSize");

                            b1.Property<string>("MlsArea")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("MlsArea");

                            b1.Property<string>("PropertyType")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("PropertyType");

                            b1.Property<string>("Subdivision")
                                .HasMaxLength(75)
                                .HasColumnType("nvarchar(75)")
                                .HasColumnName("Subdivision");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Community.Utilities", "Utilities", b1 =>
                        {
                            b1.Property<Guid>("CommunitySaleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Appliances")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Appliances");

                            b1.Property<string>("ConstructionMaterials")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ConstructionMaterials");

                            b1.Property<string>("CoolingSystem")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CoolingSystem");

                            b1.Property<string>("Disclosures")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Disclosures");

                            b1.Property<string>("DocumentsAvailable")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("DocumentsAvailable");

                            b1.Property<string>("ExteriorFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ExteriorFeatures");

                            b1.Property<string>("Fencing")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Fencing");

                            b1.Property<string>("FireplaceDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("FireplaceDescription");

                            b1.Property<int?>("Fireplaces")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("Fireplaces");

                            b1.Property<string>("Floors")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Floors");

                            b1.Property<string>("Foundation")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Foundation");

                            b1.Property<string>("GarageDescription")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("GarageDescription");

                            b1.Property<int?>("GarageSpaces")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("GarageSpaces");

                            b1.Property<string>("HeatSystem")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("HeatSystem");

                            b1.Property<string>("InteriorFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("InteriorFeatures");

                            b1.Property<string>("LaundryLocation")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("LaundryLocation");

                            b1.Property<string>("NeighborhoodAmenities")
                                .HasMaxLength(286)
                                .HasColumnType("nvarchar(286)")
                                .HasColumnName("NeighborhoodAmenities");

                            b1.Property<int?>("ParkingTotal")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("ParkingTotal");

                            b1.Property<string>("PatioAndPorchFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("PatioAndPorchFeatures");

                            b1.Property<string>("RestrictionsDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("RestrictionsDescription");

                            b1.Property<string>("RoofDescription")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("RoofDescription");

                            b1.Property<string>("SecurityFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("SecurityFeatures");

                            b1.Property<string>("UtilitiesDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("UtilitiesDescription");

                            b1.Property<string>("View")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("View");

                            b1.Property<string>("WaterSewer")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("WaterSewer");

                            b1.Property<string>("WaterSource")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("WaterSource");

                            b1.Property<string>("WindowFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("WindowFeatures");

                            b1.HasKey("CommunitySaleId");

                            b1.ToTable("Community");

                            b1.WithOwner()
                                .HasForeignKey("CommunitySaleId");
                        });

                    b.Navigation("AccessInformation");

                    b.Navigation("AdditionalInstructions");

                    b.Navigation("AppointmentRestrictions");

                    b.Navigation("EmailLead")
                        .IsRequired();

                    b.Navigation("Financial");

                    b.Navigation("ProfileInfo");

                    b.Navigation("Property")
                        .IsRequired();

                    b.Navigation("SaleOffice");

                    b.Navigation("SchoolsInfo")
                        .IsRequired();

                    b.Navigation("Showing")
                        .IsRequired();

                    b.Navigation("Utilities");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ManagementTrace", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", "SaleListing")
                        .WithMany("ManagementTraces")
                        .HasForeignKey("SaleListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleListing");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", "SaleProperty")
                        .WithMany("SaleListings")
                        .HasForeignKey("SalePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AccessInformation", "AccessInformation", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AccessMethod")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AccessMethod");

                            b1.Property<string>("AccessNotes")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("AccessNotes");

                            b1.Property<string>("AlarmArmCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmArmCode");

                            b1.Property<string>("AlarmDisarmCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmDisarmCode");

                            b1.Property<string>("AlarmNotes")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmNotes");

                            b1.Property<string>("AlarmPasscode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("AlarmPasscode");

                            b1.Property<string>("CbsCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("CbsCode");

                            b1.Property<string>("Code")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Code");

                            b1.Property<string>("Combination")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Combination");

                            b1.Property<string>("DeviceId")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("DeviceId");

                            b1.Property<string>("GateCode")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("GateCode");

                            b1.Property<string>("Location")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("Location");

                            b1.Property<bool>("ProvideAlarmDetails")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("ProvideAlarmDetails");

                            b1.Property<string>("Serial")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("Serial");

                            b1.Property<string>("SharingCode")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("")
                                .HasColumnName("SharingCode");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AdditionalInstructions", "AdditionalInstructions", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("NotesForApptStaff")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("NotesForApptStaff");

                            b1.Property<string>("NotesForShowingAgent")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasDefaultValue("")
                                .HasColumnName("NotesForShowingAgent");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.ShowingTime.AppointmentRestrictions", "AppointmentRestrictions", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("AllowAppraisals")
                                .HasColumnType("bit")
                                .HasColumnName("AllowAppraisals");

                            b1.Property<bool>("AllowInspectionsAndWalkThroughs")
                                .HasColumnType("bit")
                                .HasColumnName("AllowInspectionsAndWalkThroughs");

                            b1.Property<bool>("AllowRealtimeAvailabilityForBrokers")
                                .HasColumnType("bit")
                                .HasColumnName("AllowRealtimeAvailabilityForBrokers");

                            b1.Property<int?>("BufferTimeBetweenAppointments")
                                .HasColumnType("int")
                                .HasColumnName("BufferTimeBetweenAppointments");

                            b1.Property<bool>("LeadTime")
                                .HasColumnType("bit")
                                .HasColumnName("LeadTime");

                            b1.Property<int?>("MaxShowingWindowShowings")
                                .HasColumnType("int")
                                .HasColumnName("MaxShowingWindowShowings");

                            b1.Property<int?>("MinShowingWindowShowings")
                                .HasColumnType("int")
                                .HasColumnName("MinShowingWindowShowings");

                            b1.Property<string>("OverlappingAppointmentMode")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OverlappingAppointmentMode");

                            b1.Property<int?>("RequiredTimeHours")
                                .HasColumnType("int")
                                .HasColumnName("RequiredTimeHours");

                            b1.Property<int?>("SuggestedTimeHours")
                                .HasColumnType("int")
                                .HasColumnName("SuggestedTimeHours");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.PublishInfo", "PublishInfo", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("PublishDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("PublishDate");

                            b1.Property<string>("PublishStatus")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PublishStatus");

                            b1.Property<string>("PublishType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PublishType");

                            b1.Property<Guid?>("PublishUser")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PublishUser");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.ListingStatusFieldsInfo", "StatusFieldsInfo", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AgentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AgentId");

                            b1.Property<Guid?>("AgentIdSecond")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AgentIdSecond");

                            b1.Property<DateTime?>("BackOnMarketDate")
                                .HasColumnType("datetime")
                                .HasColumnName("BackOnMarketDate");

                            b1.Property<string>("CancelledReason")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("CancelledReason");

                            b1.Property<decimal?>("ClosePrice")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ClosePrice");

                            b1.Property<DateTime?>("ClosedDate")
                                .HasColumnType("datetime")
                                .HasColumnName("ClosedDate");

                            b1.Property<string>("ContingencyInfo")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ContingencyInfo");

                            b1.Property<DateTime?>("EstimatedClosedDate")
                                .HasColumnType("datetime")
                                .HasColumnName("EstimatedClosedDate");

                            b1.Property<bool>("HasBuyerAgent")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("HasBuyerAgent");

                            b1.Property<bool>("HasContingencyInfo")
                                .HasColumnType("bit")
                                .HasColumnName("HasContingencyInfo");

                            b1.Property<bool>("HasSecondBuyerAgent")
                                .HasColumnType("bit")
                                .HasColumnName("HasSecondBuyerAgent");

                            b1.Property<DateTime?>("OffMarketDate")
                                .HasColumnType("datetime")
                                .HasColumnName("OffMarketDate");

                            b1.Property<DateTime?>("PendingDate")
                                .HasColumnType("datetime")
                                .HasColumnName("PendingDate");

                            b1.Property<string>("SaleTerms")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("SaleTerms");

                            b1.Property<string>("SellConcess")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasDefaultValue("0")
                                .HasColumnName("SellConcess");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.Listing.InvoiceInfo", "InvoiceInfo", b1 =>
                        {
                            b1.Property<Guid>("SaleListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DocNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("DocNumber");

                            b1.Property<string>("InvoiceId")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("InvoiceId");

                            b1.Property<Guid?>("InvoiceRequestedBy")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("InvoiceRequestedBy");

                            b1.Property<DateTime?>("InvoiceRequestedOn")
                                .HasColumnType("datetime2")
                                .HasColumnName("InvoiceRequestedOn");

                            b1.HasKey("SaleListingId");

                            b1.ToTable("ListingSale");

                            b1.WithOwner()
                                .HasForeignKey("SaleListingId");
                        });

                    b.Navigation("AccessInformation");

                    b.Navigation("AdditionalInstructions");

                    b.Navigation("AppointmentRestrictions");

                    b.Navigation("InvoiceInfo")
                        .IsRequired();

                    b.Navigation("PublishInfo")
                        .IsRequired();

                    b.Navigation("SaleProperty");

                    b.Navigation("StatusFieldsInfo");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListingTrace", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", "ListingSale")
                        .WithMany("ListingSaleTraces")
                        .HasForeignKey("ListingSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListingSale");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ScrapedListing", b =>
                {
                    b.OwnsOne("Husa.Quicklister.Abor.Domain.ValueObjects.ScrapedListingValueObject", "ListingDetails", b1 =>
                        {
                            b1.Property<Guid>("ScrapedListingId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address");

                            b1.Property<string>("BuilderName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BuilderName");

                            b1.Property<string>("City")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("City");

                            b1.Property<string>("Comment")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("Comment");

                            b1.Property<string>("Community")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Community");

                            b1.Property<int?>("DOM")
                                .HasColumnType("int")
                                .HasColumnName("DOM");

                            b1.Property<DateTime?>("ListDate")
                                .HasColumnType("datetime")
                                .HasColumnName("ListDate");

                            b1.Property<decimal?>("ListPrice")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ListPrice");

                            b1.Property<int>("ListStatus")
                                .HasColumnType("int")
                                .HasColumnName("ListStatus");

                            b1.Property<string>("MlsNum")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("MlsNum");

                            b1.Property<string>("OfficeName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("OfficeName");

                            b1.Property<int>("Price")
                                .HasColumnType("int")
                                .HasColumnName("Price");

                            b1.Property<DateTime?>("Refreshed")
                                .HasColumnType("datetime")
                                .HasColumnName("Refreshed");

                            b1.Property<string>("UncleanBuilder")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("UncleanBuilder");

                            b1.Property<int?>("UnitNum")
                                .HasColumnType("int")
                                .HasColumnName("UnitNum");

                            b1.HasKey("ScrapedListingId");

                            b1.ToTable("ScrapedListing");

                            b1.WithOwner()
                                .HasForeignKey("ScrapedListingId");
                        });

                    b.Navigation("ListingDetails");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Lot.LotListing", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", "Community")
                        .WithMany("LotListings")
                        .HasForeignKey("CommunityId");

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotAddressInfo", "AddressInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("County")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("County");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("State");

                            b1.Property<string>("StreetDirPrefix")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("StreetDirPrefix");

                            b1.Property<string>("StreetDirSuffix")
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("StreetDirSuffix");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("StreetNumber");

                            b1.Property<string>("StreetType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("StreetType");

                            b1.Property<string>("Subdivision")
                                .HasMaxLength(75)
                                .HasColumnType("nvarchar(75)")
                                .HasColumnName("Subdivision");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("UnitNumber");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotFeaturesInfo", "FeaturesInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Disclosures")
                                .HasMaxLength(240)
                                .HasColumnType("nvarchar(240)")
                                .HasColumnName("Disclosures");

                            b1.Property<string>("DistanceToWaterAccess")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("DistanceToWaterAccess");

                            b1.Property<string>("DocumentsAvailable")
                                .HasMaxLength(1805)
                                .HasColumnType("nvarchar(1805)")
                                .HasColumnName("DocumentsAvailable");

                            b1.Property<string>("ExteriorFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ExteriorFeatures");

                            b1.Property<string>("Fencing")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Fencing");

                            b1.Property<bool>("GroundWaterConservDistric")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("GroundWaterConservDistric");

                            b1.Property<string>("HorseAmenities")
                                .HasMaxLength(120)
                                .HasColumnType("nvarchar(120)")
                                .HasColumnName("HorseAmenities");

                            b1.Property<string>("MineralsFeatures")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("MineralsFeatures");

                            b1.Property<string>("NeighborhoodAmenities")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("NeighborhoodAmenities");

                            b1.Property<string>("OtherStructures")
                                .HasMaxLength(315)
                                .HasColumnType("nvarchar(315)")
                                .HasColumnName("OtherStructures");

                            b1.Property<string>("RestrictionsDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("RestrictionsDescription");

                            b1.Property<string>("RoadSurface")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("RoadSurface");

                            b1.Property<string>("UtilitiesDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("UtilitiesDescription");

                            b1.Property<string>("View")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("View");

                            b1.Property<string>("WaterBodyName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("WaterBodyName");

                            b1.Property<string>("WaterSewer")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("WaterSewer");

                            b1.Property<string>("WaterSource")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("WaterSource");

                            b1.Property<string>("WaterfrontFeatures")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("WaterfrontFeatures");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotFinancialInfo", "FinancialInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AcceptableFinancing")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("AcceptableFinancing");

                            b1.Property<decimal?>("AgentBonusAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AgentBonusAmount");

                            b1.Property<string>("AgentBonusAmountType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("AgentBonusAmountType");

                            b1.Property<string>("BillingFrequency")
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("BillingFrequency");

                            b1.Property<DateTime?>("BonusExpirationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BonusExpirationDate");

                            b1.Property<decimal?>("BuyersAgentCommission")
                                .HasMaxLength(6)
                                .HasPrecision(18, 3)
                                .HasColumnType("decimal(18,3)")
                                .HasColumnName("BuyersAgentCommission");

                            b1.Property<string>("BuyersAgentCommissionType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("BuyersAgentCommissionType");

                            b1.Property<decimal?>("EstimatedTax")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("EstimatedTax");

                            b1.Property<string>("HOARequirement")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("HOARequirement");

                            b1.Property<bool>("HasAgentBonus")
                                .HasColumnType("bit")
                                .HasColumnName("HasAgentBonus");

                            b1.Property<bool>("HasBonusWithAmount")
                                .HasColumnType("bit")
                                .HasColumnName("HasBonusWithAmount");

                            b1.Property<bool>("HasHoa")
                                .HasColumnType("bit")
                                .HasColumnName("HasHoa");

                            b1.Property<decimal?>("HoaFee")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HoaFee");

                            b1.Property<string>("HoaIncludes")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("HoaIncludes");

                            b1.Property<string>("HoaName")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("HoaName");

                            b1.Property<string>("LandTitleEvidence")
                                .HasMaxLength(16)
                                .HasColumnType("nvarchar(16)")
                                .HasColumnName("LandTitleEvidence");

                            b1.Property<string>("PreferredTitleCompany")
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("PreferredTitleCompany");

                            b1.Property<int?>("TaxAssesedValue")
                                .HasColumnType("int")
                                .HasColumnName("TaxAssesedValue");

                            b1.Property<string>("TaxExemptions")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)")
                                .HasColumnName("TaxExemptions");

                            b1.Property<decimal?>("TaxRate")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxRate");

                            b1.Property<int?>("TaxYear")
                                .HasColumnType("int")
                                .HasColumnName("TaxYear");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.PublishInfo", "PublishInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("PublishDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("PublishDate");

                            b1.Property<string>("PublishStatus")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PublishStatus");

                            b1.Property<string>("PublishType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PublishType");

                            b1.Property<Guid?>("PublishUser")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("PublishUser");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.ListingStatusFieldsInfo", "StatusFieldsInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid?>("AgentId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AgentId");

                            b1.Property<Guid?>("AgentIdSecond")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("AgentIdSecond");

                            b1.Property<DateTime?>("BackOnMarketDate")
                                .HasColumnType("datetime")
                                .HasColumnName("BackOnMarketDate");

                            b1.Property<string>("CancelledReason")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("CancelledReason");

                            b1.Property<decimal?>("ClosePrice")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ClosePrice");

                            b1.Property<DateTime?>("ClosedDate")
                                .HasColumnType("datetime")
                                .HasColumnName("ClosedDate");

                            b1.Property<string>("ContingencyInfo")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ContingencyInfo");

                            b1.Property<DateTime?>("EstimatedClosedDate")
                                .HasColumnType("datetime")
                                .HasColumnName("EstimatedClosedDate");

                            b1.Property<bool>("HasBuyerAgent")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("HasBuyerAgent");

                            b1.Property<bool>("HasContingencyInfo")
                                .HasColumnType("bit")
                                .HasColumnName("HasContingencyInfo");

                            b1.Property<bool>("HasSecondBuyerAgent")
                                .HasColumnType("bit")
                                .HasColumnName("HasSecondBuyerAgent");

                            b1.Property<DateTime?>("OffMarketDate")
                                .HasColumnType("datetime")
                                .HasColumnName("OffMarketDate");

                            b1.Property<DateTime?>("PendingDate")
                                .HasColumnType("datetime")
                                .HasColumnName("PendingDate");

                            b1.Property<string>("SaleTerms")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("SaleTerms");

                            b1.Property<string>("SellConcess")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasDefaultValue("0")
                                .HasColumnName("SellConcess");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotPropertyInfo", "PropertyInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("AlsoListedAs")
                                .HasColumnType("int")
                                .HasColumnName("AlsoListedAs");

                            b1.Property<bool>("BuilderRestrictions")
                                .HasColumnType("bit")
                                .HasColumnName("BuilderRestrictions");

                            b1.Property<bool>("CommercialAllowed")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("CommercialAllowed");

                            b1.Property<string>("FemaFloodPlain")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("FemaFloodPlain");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Latitude");

                            b1.Property<string>("LegalDescription")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)")
                                .HasColumnName("LegalDescription");

                            b1.Property<bool>("LiveStock")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("LiveStock");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Longitude");

                            b1.Property<string>("LotDescription")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("LotDescription");

                            b1.Property<string>("LotDimension")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotDimension");

                            b1.Property<string>("LotSize")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotSize");

                            b1.Property<string>("MlsArea")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("MlsArea");

                            b1.Property<int?>("NumberOfPonds")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfPonds");

                            b1.Property<int?>("NumberOfWells")
                                .HasColumnType("int")
                                .HasColumnName("NumberOfWells");

                            b1.Property<string>("PropCondition")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("PropCondition");

                            b1.Property<string>("PropertySubType")
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)")
                                .HasColumnName("PropertySubType");

                            b1.Property<string>("PropertyType")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("PropertyType");

                            b1.Property<string>("SoilType")
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)")
                                .HasColumnName("SoilType");

                            b1.Property<bool>("SurfaceWater")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bit")
                                .HasDefaultValue(false)
                                .HasColumnName("SurfaceWater");

                            b1.Property<string>("TaxBlock")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("TaxBlock");

                            b1.Property<string>("TaxId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TaxId");

                            b1.Property<string>("TaxLot")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("TaxLot");

                            b1.Property<string>("TypeOfHomeAllowed")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TypeOfHomeAllowed");

                            b1.Property<bool>("UpdateGeocodes")
                                .HasColumnType("bit")
                                .HasColumnName("UpdateGeocodes");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotSchoolsInfo", "SchoolsInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ElementarySchool");

                            b1.Property<string>("HighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("HighSchool");

                            b1.Property<string>("MiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MiddleSchool");

                            b1.Property<string>("OtherElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherElementarySchool");

                            b1.Property<string>("OtherHighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherHighSchool");

                            b1.Property<string>("OtherMiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherMiddleSchool");

                            b1.Property<string>("SchoolDistrict")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SchoolDistrict");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotShowingInfo", "ShowingInfo", b1 =>
                        {
                            b1.Property<Guid>("LotListingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ApptPhone")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("ApptPhone");

                            b1.Property<string>("Directions")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("Directions");

                            b1.Property<string>("OwnerName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("PublicRemarks")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("PublicRemarks");

                            b1.Property<string>("ShowingContactName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ShowingContactName");

                            b1.Property<string>("ShowingContactType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ShowingContactType");

                            b1.Property<string>("ShowingInstructions")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("ShowingInstructions");

                            b1.Property<string>("ShowingRequirements")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ShowingRequirements");

                            b1.Property<string>("ShowingServicePhone")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("ShowingServicePhone");

                            b1.HasKey("LotListingId");

                            b1.ToTable("LotListing");

                            b1.WithOwner()
                                .HasForeignKey("LotListingId");
                        });

                    b.Navigation("AddressInfo");

                    b.Navigation("Community");

                    b.Navigation("FeaturesInfo");

                    b.Navigation("FinancialInfo");

                    b.Navigation("PropertyInfo");

                    b.Navigation("PublishInfo");

                    b.Navigation("SchoolsInfo");

                    b.Navigation("ShowingInfo");

                    b.Navigation("StatusFieldsInfo");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Lot.LotManagementTrace", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Lot.LotListing", "Listing")
                        .WithMany("ManagementTraces")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Office.Office", b =>
                {
                    b.OwnsOne("Husa.Quicklister.Abor.Domain.ValueObjects.OfficeValueObject", "OfficeValue", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Address")
                                .HasMaxLength(65)
                                .HasColumnType("nvarchar(65)")
                                .HasColumnName("Address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<DateTimeOffset>("MarketModified")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("MarketModified");

                            b1.Property<string>("MarketUniqueId")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("MarketUniqueId");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Name");

                            b1.Property<string>("Phone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Phone");

                            b1.Property<string>("StateOrProvince")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("StateOrProvince");

                            b1.Property<int>("Status")
                                .HasMaxLength(10)
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(19)
                                .HasColumnType("nvarchar(19)")
                                .HasColumnName("Type");

                            b1.Property<string>("Zip")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("Zip");

                            b1.Property<string>("ZipExt")
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)")
                                .HasColumnName("ZipExt");

                            b1.HasKey("OfficeId");

                            b1.ToTable("Office");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("OfficeValue");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Plan.Plan", b =>
                {
                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Plan.BasePlan", "BasePlan", b1 =>
                        {
                            b1.Property<Guid>("PlanId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("DiningAreasTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("DiningAreasTotal");

                            b1.Property<int?>("FullBathsTotal")
                                .HasMaxLength(50)
                                .HasColumnType("int")
                                .HasColumnName("FullBathsTotal");

                            b1.Property<int?>("HalfBathsTotal")
                                .HasMaxLength(3)
                                .HasColumnType("int")
                                .HasColumnName("HalfBathsTotal");

                            b1.Property<bool>("IsNewConstruction")
                                .HasColumnType("bit")
                                .HasColumnName("IsNewConstruction");

                            b1.Property<int?>("LivingAreasTotal")
                                .HasMaxLength(11)
                                .HasColumnType("int")
                                .HasColumnName("LivingAreasTotal");

                            b1.Property<int?>("MainLevelBedroomTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("MainLevelBedroomTotal");

                            b1.Property<string>("Name")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Name");

                            b1.Property<int?>("OtherLevelsBedroomTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("OtherLevelsBedroomTotal");

                            b1.Property<string>("OwnerName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("OwnerName");

                            b1.Property<int?>("SqFtTotal")
                                .HasMaxLength(11)
                                .HasColumnType("int")
                                .HasColumnName("SqFtTotal");

                            b1.Property<string>("StoriesTotal")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("StoriesTotal");

                            b1.HasKey("PlanId");

                            b1.ToTable("Plan");

                            b1.WithOwner()
                                .HasForeignKey("PlanId");
                        });

                    b.Navigation("BasePlan");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", "Community")
                        .WithMany("SaleProperties")
                        .HasForeignKey("CommunityId");

                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Plan.Plan", "Plan")
                        .WithMany("SaleProperties")
                        .HasForeignKey("PlanId");

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.SalesOffice", "SalesOfficeInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("SalesOfficeCity")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeCity");

                            b1.Property<string>("SalesOfficeZip")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeZip");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeStreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("SalesOfficeStreetNumber");

                            b1.Property<string>("StreetSuffix")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SalesOfficeStreetSuffix");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.FeaturesInfo", "FeaturesInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Appliances")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Appliances");

                            b1.Property<string>("ConstructionMaterials")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ConstructionMaterials");

                            b1.Property<string>("CoolingSystem")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("CoolingSystem");

                            b1.Property<string>("Disclosures")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("Disclosures");

                            b1.Property<string>("DistanceToWaterAccess")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("DistanceToWaterAccess");

                            b1.Property<string>("DocumentsAvailable")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("DocumentsAvailable");

                            b1.Property<string>("ExteriorFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ExteriorFeatures");

                            b1.Property<string>("Fencing")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Fencing");

                            b1.Property<string>("FireplaceDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("FireplaceDescription");

                            b1.Property<int?>("Fireplaces")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("Fireplaces");

                            b1.Property<string>("Floors")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Floors");

                            b1.Property<string>("Foundation")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("Foundation");

                            b1.Property<string>("GarageDescription")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("GarageDescription");

                            b1.Property<int?>("GarageSpaces")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("GarageSpaces");

                            b1.Property<string>("GuestAccommodationsDescription")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("GuestAccommodationsDescription");

                            b1.Property<int?>("GuestBedroomsTotal")
                                .HasMaxLength(3)
                                .HasColumnType("int")
                                .HasColumnName("GuestBedroomsTotal");

                            b1.Property<int?>("GuestFullBathsTotal")
                                .HasMaxLength(3)
                                .HasColumnType("int")
                                .HasColumnName("GuestFullBathsTotal");

                            b1.Property<int?>("GuestHalfBathsTotal")
                                .HasMaxLength(3)
                                .HasColumnType("int")
                                .HasColumnName("GuestHalfBathsTotal");

                            b1.Property<string>("HeatSystem")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("HeatSystem");

                            b1.Property<string>("HomeFaces")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("HomeFaces");

                            b1.Property<string>("InteriorFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("InteriorFeatures");

                            b1.Property<bool>("IsAIGeneratedPropertyDescription")
                                .HasColumnType("bit")
                                .HasColumnName("IsAIGeneratedPropertyDescription");

                            b1.Property<bool>("IsNewConstruction")
                                .HasColumnType("bit")
                                .HasColumnName("IsNewConstruction");

                            b1.Property<string>("LaundryLocation")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("LaundryLocation");

                            b1.Property<string>("NeighborhoodAmenities")
                                .HasMaxLength(286)
                                .HasColumnType("nvarchar(286)")
                                .HasColumnName("NeighborhoodAmenities");

                            b1.Property<int?>("ParkingTotal")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("ParkingTotal");

                            b1.Property<string>("PatioAndPorchFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("PatioAndPorchFeatures");

                            b1.Property<string>("PropertyDescription")
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)")
                                .HasColumnName("PropertyDescription");

                            b1.Property<string>("RestrictionsDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("RestrictionsDescription");

                            b1.Property<string>("RoofDescription")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("RoofDescription");

                            b1.Property<string>("SecurityFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("SecurityFeatures");

                            b1.Property<string>("UnitStyle")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("UnitStyle");

                            b1.Property<string>("UtilitiesDescription")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("UtilitiesDescription");

                            b1.Property<string>("View")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("View");

                            b1.Property<string>("WaterBodyName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("WaterBodyName");

                            b1.Property<string>("WaterSewer")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("WaterSewer");

                            b1.Property<string>("WaterSource")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("WaterSource");

                            b1.Property<string>("WaterfrontFeatures")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("WaterfrontFeatures");

                            b1.Property<string>("WindowFeatures")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("WindowFeatures");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.FinancialInfo", "FinancialInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AcceptableFinancing")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("AcceptableFinancing");

                            b1.Property<decimal?>("AgentBonusAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AgentBonusAmount");

                            b1.Property<string>("AgentBonusAmountType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("AgentBonusAmountType");

                            b1.Property<string>("BillingFrequency")
                                .HasMaxLength(6)
                                .HasColumnType("nvarchar(6)")
                                .HasColumnName("BillingFrequency");

                            b1.Property<DateTime?>("BonusExpirationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("BonusExpirationDate");

                            b1.Property<decimal?>("BuyersAgentCommission")
                                .HasMaxLength(6)
                                .HasPrecision(18, 3)
                                .HasColumnType("decimal(18,3)")
                                .HasColumnName("BuyersAgentCommission");

                            b1.Property<string>("BuyersAgentCommissionType")
                                .IsRequired()
                                .HasMaxLength(1)
                                .HasColumnType("nvarchar(1)")
                                .HasColumnName("BuyersAgentCommissionType");

                            b1.Property<string>("HOARequirement")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("HOARequirement");

                            b1.Property<bool>("HasAgentBonus")
                                .HasColumnType("bit")
                                .HasColumnName("HasAgentBonus");

                            b1.Property<bool>("HasBonusWithAmount")
                                .HasColumnType("bit")
                                .HasColumnName("HasBonusWithAmount");

                            b1.Property<bool>("HasHoa")
                                .HasColumnType("bit")
                                .HasColumnName("HasHoa");

                            b1.Property<decimal?>("HoaFee")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("HoaFee");

                            b1.Property<string>("HoaIncludes")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("HoaIncludes");

                            b1.Property<string>("HoaName")
                                .HasMaxLength(70)
                                .HasColumnType("nvarchar(70)")
                                .HasColumnName("HoaName");

                            b1.Property<string>("TaxExemptions")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("TaxExemptions");

                            b1.Property<decimal?>("TaxRate")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxRate");

                            b1.Property<int?>("TaxYear")
                                .HasMaxLength(4)
                                .HasColumnType("int")
                                .HasColumnName("TaxYear");

                            b1.Property<string>("TitleCompany")
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("TitleCompany");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.PropertyInfo", "PropertyInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("ConstructionCompletionDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ConstructionCompletionDate");

                            b1.Property<string>("ConstructionStage")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("ConstructionStage");

                            b1.Property<int?>("ConstructionStartYear")
                                .HasColumnType("int")
                                .HasColumnName("ConstructionStartYear");

                            b1.Property<string>("FemaFloodPlain")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("FemaFloodPlain");

                            b1.Property<bool>("IsXmlManaged")
                                .HasColumnType("bit")
                                .HasColumnName("IsXmlManaged");

                            b1.Property<decimal?>("Latitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Latitude");

                            b1.Property<string>("LegalDescription")
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)")
                                .HasColumnName("LegalDescription");

                            b1.Property<decimal?>("Longitude")
                                .HasPrecision(32, 12)
                                .HasColumnType("decimal(32,12)")
                                .HasColumnName("Longitude");

                            b1.Property<string>("LotDescription")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("LotDescription");

                            b1.Property<string>("LotDimension")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotDimension");

                            b1.Property<string>("LotSize")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("LotSize");

                            b1.Property<string>("MlsArea")
                                .HasMaxLength(5)
                                .HasColumnType("nvarchar(5)")
                                .HasColumnName("MlsArea");

                            b1.Property<string>("PropertyType")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("PropertyType");

                            b1.Property<string>("TaxId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("TaxId");

                            b1.Property<string>("TaxLot")
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("TaxLot");

                            b1.Property<bool>("UpdateGeocodes")
                                .HasColumnType("bit")
                                .HasColumnName("UpdateGeocodes");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleAddressInfo", "AddressInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("County")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("County");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)")
                                .HasColumnName("State");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("StreetNumber");

                            b1.Property<string>("StreetType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("StreetType");

                            b1.Property<string>("Subdivision")
                                .HasMaxLength(75)
                                .HasColumnType("nvarchar(75)")
                                .HasColumnName("Subdivision");

                            b1.Property<string>("UnitNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("UnitNumber");

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(12)
                                .HasColumnType("nvarchar(12)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.ShowingInfo", "ShowingInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AgentPrivateRemarks")
                                .HasMaxLength(4000)
                                .HasColumnType("nvarchar(4000)")
                                .HasColumnName("AgentPrivateRemarks");

                            b1.Property<string>("AgentPrivateRemarksAdditional")
                                .HasMaxLength(1000)
                                .HasColumnType("nvarchar(1000)")
                                .HasColumnName("AgentPrivateRemarksAdditional");

                            b1.Property<string>("ContactPhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("ContactPhone");

                            b1.Property<string>("Directions")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("Directions");

                            b1.Property<bool>("EnableOpenHouses")
                                .HasColumnType("bit")
                                .HasColumnName("EnableOpenHouses");

                            b1.Property<string>("LockBoxSerialNumber")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LockBoxSerialNumber");

                            b1.Property<string>("LockBoxType")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("LockBoxType");

                            b1.Property<string>("OccupantPhone")
                                .HasMaxLength(14)
                                .HasColumnType("nvarchar(14)")
                                .HasColumnName("OccupantPhone");

                            b1.Property<string>("OwnerName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("ShowingInfoOwnerName");

                            b1.Property<string>("RealtorContactEmail")
                                .HasMaxLength(255)
                                .HasColumnType("nvarchar(255)")
                                .HasColumnName("RealtorContactEmail");

                            b1.Property<bool>("ShowOpenHousesPending")
                                .HasColumnType("bit")
                                .HasColumnName("ShowOpenHousesPending");

                            b1.Property<string>("ShowingInstructions")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)")
                                .HasColumnName("ShowingInstructions");

                            b1.Property<string>("ShowingRequirements")
                                .HasMaxLength(300)
                                .HasColumnType("nvarchar(300)")
                                .HasColumnName("ShowingRequirements");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SpacesDimensionsInfo", "SpacesDimensionsInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("DiningAreasTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("DiningAreasTotal");

                            b1.Property<int?>("FullBathsTotal")
                                .HasMaxLength(50)
                                .HasColumnType("int")
                                .HasColumnName("FullBathsTotal");

                            b1.Property<int?>("HalfBathsTotal")
                                .HasMaxLength(3)
                                .HasColumnType("int")
                                .HasColumnName("HalfBathsTotal");

                            b1.Property<int?>("LivingAreasTotal")
                                .HasMaxLength(11)
                                .HasColumnType("int")
                                .HasColumnName("LivingAreasTotal");

                            b1.Property<int?>("MainLevelBedroomTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("MainLevelBedroomTotal");

                            b1.Property<int?>("OtherLevelsBedroomTotal")
                                .HasMaxLength(1)
                                .HasColumnType("int")
                                .HasColumnName("OtherLevelsBedroomTotal");

                            b1.Property<int?>("SqFtTotal")
                                .HasMaxLength(11)
                                .HasColumnType("int")
                                .HasColumnName("SqFtTotal");

                            b1.Property<string>("StoriesTotal")
                                .HasMaxLength(32)
                                .HasColumnType("nvarchar(32)")
                                .HasColumnName("StoriesTotal");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.OwnsOne("Husa.Quicklister.Abor.Domain.Entities.Base.SchoolsInfo", "SchoolsInfo", b1 =>
                        {
                            b1.Property<Guid>("SalePropertyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ElementarySchool");

                            b1.Property<string>("HighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("HighSchool");

                            b1.Property<string>("MiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MiddleSchool");

                            b1.Property<string>("OtherElementarySchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherElementarySchool");

                            b1.Property<string>("OtherHighSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherHighSchool");

                            b1.Property<string>("OtherMiddleSchool")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("OtherMiddleSchool");

                            b1.Property<string>("SchoolDistrict")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("SchoolDistrict");

                            b1.HasKey("SalePropertyId");

                            b1.ToTable("SaleProperty");

                            b1.WithOwner()
                                .HasForeignKey("SalePropertyId");
                        });

                    b.Navigation("AddressInfo");

                    b.Navigation("Community");

                    b.Navigation("FeaturesInfo");

                    b.Navigation("FinancialInfo");

                    b.Navigation("Plan");

                    b.Navigation("PropertyInfo");

                    b.Navigation("SalesOfficeInfo")
                        .IsRequired();

                    b.Navigation("SchoolsInfo")
                        .IsRequired();

                    b.Navigation("ShowingInfo");

                    b.Navigation("SpacesDimensionsInfo");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.CommunityShowingTimeContact", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.ShowingTimeContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.ListingShowingTimeContact", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.ShowingTime.ShowingTimeContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.Agent.Agent", b =>
                {
                    b.OwnsOne("Husa.Quicklister.Extensions.Domain.Entities.Agent.AgentValueObject", "AgentValue", b1 =>
                        {
                            b1.Property<Guid>("AgentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CellPhone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("CellPhone");

                            b1.Property<string>("Email")
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)")
                                .HasColumnName("Email");

                            b1.Property<string>("Fax")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Fax");

                            b1.Property<string>("FirstName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("FullName")
                                .HasMaxLength(65)
                                .HasColumnType("nvarchar(65)")
                                .HasColumnName("FullName");

                            b1.Property<string>("HomePhone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("HomePhone");

                            b1.Property<string>("LastName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("LastName");

                            b1.Property<DateTimeOffset>("MarketModified")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("MarketModified");

                            b1.Property<string>("MarketUniqueId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MarketUniqueId");

                            b1.Property<string>("MemberStateLicense")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("MemberStateLicense");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MiddleName");

                            b1.Property<string>("MlsId")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("MlsId");

                            b1.Property<string>("OfficeId")
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)")
                                .HasColumnName("OfficeId");

                            b1.Property<int>("Status")
                                .HasMaxLength(20)
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.Property<string>("Web")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Web");

                            b1.Property<string>("WorkPhone")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("WorkPhone");

                            b1.HasKey("AgentId");

                            b1.ToTable("Agent");

                            b1.WithOwner()
                                .HasForeignKey("AgentId");
                        });

                    b.Navigation("AgentValue");
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.Listing.XmlRequestError", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", null)
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Husa.Quicklister.Extensions.Domain.Entities.ViolationWarningLog", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", null)
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.ListingSaleRoom", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", null)
                        .WithMany("Rooms")
                        .HasForeignKey("SalePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Plan.PlanRoom", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Plan.Plan", null)
                        .WithMany("Rooms")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunityOpenHouse", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", "Community")
                        .WithMany("OpenHouses")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListingOpenHouse", b =>
                {
                    b.HasOne("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", "SaleProperty")
                        .WithMany("OpenHouses")
                        .HasForeignKey("SalePropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleProperty");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Community.CommunitySale", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("LotListings");

                    b.Navigation("OpenHouses");

                    b.Navigation("SaleProperties");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Listing.SaleListing", b =>
                {
                    b.Navigation("ListingSaleTraces");

                    b.Navigation("ManagementTraces");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Lot.LotListing", b =>
                {
                    b.Navigation("ManagementTraces");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Plan.Plan", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("SaleProperties");
                });

            modelBuilder.Entity("Husa.Quicklister.Abor.Domain.Entities.Property.SaleProperty", b =>
                {
                    b.Navigation("OpenHouses");

                    b.Navigation("Rooms");

                    b.Navigation("SaleListings");
                });
#pragma warning restore 612, 618
        }
    }
}
