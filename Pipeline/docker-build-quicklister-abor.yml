pr:
  branches:
    include:
    - develop
    - release/*
    - hotfix/*
    - master
trigger:
- develop
- release/*
- hotfix/*
- master

variables:
- group: homesusa.husa.docker.quicklister.abor-dev
- group: homesusa.husa.docker

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Docker@2
  inputs:
    command: login
    containerRegistry: '$(containerRegistry)'
  displayName: 'Login to ACR'

- script: | 
    echo "Building Docker image"
    docker build -t $(containerRegistry).azurecr.io/$(repository):$(Build.BuildId)_$(Build.SourceBranchName)_$(date +%Y%m%d) -t $(containerRegistry).azurecr.io/$(repository):latest -f $(Dockerfile) . --build-arg FEED_ACCESSTOKEN=$(TOKEN)
  displayName: 'Docker Build'

- script: | 
    echo "Pushing Docker image to ACR"
    docker push $(containerRegistry).azurecr.io/$(repository):latest
    docker push $(containerRegistry).azurecr.io/$(repository):$(Build.BuildId)_$(Build.SourceBranchName)_$(date +%Y%m%d)
  displayName: 'Docker Push'
  condition: and(succeededOrFailed(), ne(variables.isPullRequest, true))

- script: |
    echo "$(Build.BuildId)_$(Build.SourceBranchName)_$(date +%Y%m%d)" > imagetag.txt
  displayName: 'Docker Image Tag'
  condition: and(succeededOrFailed(), ne(variables.isPullRequest, true))

- task: HelmInstaller@1
  inputs:
    version: '3.x'

- script: |
    chartPath="$(helmChartPath)"
    version="$(Build.BuildId)"
    sed -i "s/^version: .*/version: $version/" $chartPath
  displayName: 'Update Chart Version'

- script: |
    valuesFile="$(dirname $(helmChartPath))/values.yaml"
    newTag="$(Build.BuildId)_$(Build.SourceBranchName)_$(date +%Y%m%d)"
    echo "Updating image tag in $valuesFile to $newTag"
    sed -i "s|tag:.*|tag: \"$newTag\"|" $valuesFile
  displayName: 'Update Image Tag in values.yaml'

- script: helm package $(System.DefaultWorkingDirectory)/Helm/$(helmRepository)
  displayName: 'Package Helm Chart'

- script: helm push $(System.DefaultWorkingDirectory)/$(helmRepository)-*.tgz oci://$(containerRegistry).azurecr.io/helm
  displayName: 'Push Helm Chart'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'imagetag.txt'
    artifact: 'ImageTag'
